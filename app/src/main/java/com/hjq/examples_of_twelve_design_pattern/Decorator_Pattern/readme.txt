一、定义

装饰者模式  动态的给一个对象添加一些额外的职责。就增加功能来说，装饰者相比生成子类更灵活。

角色：

Component抽象构建：一个接口或抽象类，定义我们最核心的对象，也就是原始对象。

ConcreateComponent具体构建：是Component的具体实现。

Decorator装饰角色：一般是一个抽象类，实现或继承Component，这个类里面必然有一个private的Component属性。

ConcreateDecorator具体装饰角色：装饰ConcreateComponent对象。

二、类型

 结构型

三、适用场景

需要扩展一个类的功能，或给一个类增加附加功能。
需要动态地给一个对象增加功能，这些功能可以动态的撤销。
需要为一批的兄弟类加装功能。
四、优点

装饰者和被装饰者相互独立。
装饰者模式是继承关系的一个替代方案。不管装饰多少层放回的还是Component，实现还是is-a的关系。
可以动态的扩展一个实现类的功能。
防止类爆炸，不采用装饰者模式，有多少个具体实现类就要继承多少次。
五、缺点

 多层装饰增加了系统的复杂度。